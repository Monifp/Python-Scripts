# categorias.py
"""
M칩dulo de l칩gica de negocio para la gesti칩n de categor칤as. 游늶

Este m칩dulo contiene las funciones de alto nivel para manejar las operaciones
del ciclo de vida de una categor칤a (CRUD: Crear, Leer, Actualizar, Eliminar).
Funciona como un controlador que orquesta las interacciones entre la interfaz de
usuario (`ui`) y la capa de acceso a datos (`database`), aplicando las reglas
de negocio espec칤ficas para las categor칤as.

"""
import sqlite3
import database as db
import ui

def agregar_nueva_categoria():
    """
    Orquesta la adici칩n de una nueva categor칤a, validando la entrada.


    Args:
        Esta funci칩n no recibe par치metros.
    La funci칩n no devuelve ning칰n valor
            
    """
    if db.contar_categorias_db() >= 10:
        ui.mostrar_mensaje_error("Ud ha alcanzado el l칤mite de 10 categor칤as. Seleccione otra opcion")
        return

    # Bucle para asegurar que el nombre no est칠 vac칤o
    while True:
        nombre = ui.obtener_input("Ingrese el nombre de la nueva categor칤a: ")
        if nombre:
            break
        ui.mostrar_mensaje_error("El nombre no puede estar vac칤o.")

    try:
        db.agregar_categoria_db(nombre)
        ui.mostrar_mensaje_exito(f"Categor칤a '{nombre}' agregada.")
    except sqlite3.IntegrityError:
        ui.mostrar_mensaje_error(f"La categor칤a '{nombre}' ya existe.")

def modificar_una_categoria():
    """
    Orquesta la modificaci칩n del nombre de una categor칤a existente.

    Args:
        Esta funci칩n no recibe par치metros.
    La funci칩n no devuelve ning칰n valor.
    """
    categorias = db.obtener_categorias_db()
    if not ui.mostrar_lista_categorias(categorias):
        return

    # Bucle para obtener un ID v치lido
    while True:
        try:
            id_cat_str = ui.obtener_input("Ingrese el ID de la categor칤a a modificar: ")
            id_cat = int(id_cat_str)
            if id_cat in [c[0] for c in categorias]:
                break # El ID es v치lido y existe
            else:
                ui.mostrar_mensaje_error("ID no v치lido. Intente de nuevo.")
        except ValueError:
            ui.mostrar_mensaje_error(" Debe ingresar un ID num칠rico.")

    # Bucle para obtener un nuevo nombre v치lido
    while True:
        nuevo_nombre = ui.obtener_input("Ingrese el nuevo nombre: ")
        if nuevo_nombre:
            break
        ui.mostrar_mensaje_error("El nombre no puede estar vac칤o.")

    try:
        db.modificar_categoria_db(id_cat, nuevo_nombre)
        ui.mostrar_mensaje_exito("Categor칤a modificada.")
    except sqlite3.IntegrityError:
        ui.mostrar_mensaje_error(f"El nombre '{nuevo_nombre}' ya existe.")

def eliminar_una_categoria():
    """
    Orquesta la eliminaci칩n de una categor칤a, con validaciones.
 

    Args:
        Esta funci칩n no recibe par치metros.
    La funci칩n no devuelve ning칰n valor.
    """
    categorias = db.obtener_categorias_db()
    if not ui.mostrar_lista_categorias(categorias):
        return

    # Bucle para obtener un ID v치lido
    while True:
        try:
            id_cat_str = ui.obtener_input("Ingrese el ID de la categor칤a a eliminar: ")
            id_cat = int(id_cat_str)
            if id_cat in [c[0] for c in categorias]:
                break # El ID es v치lido y existe
            else:
                ui.mostrar